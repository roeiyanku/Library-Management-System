Index: Librarian.py
===================================================================
diff --git a/Librarian.py b/Librarian.py
deleted file mode 100644
--- a/Librarian.py	(revision 4817f8d672c56cad2b772eb738e567cd91f393d1)
+++ /dev/null	(revision 4817f8d672c56cad2b772eb738e567cd91f393d1)
@@ -1,98 +0,0 @@
-from datetime import datetime
-
-class Librarian:
-    # Initialize the librarian department with a file manager.
-    def __init__(self, file_manager):
-        self.file_manager = file_manager
-
-
-    def addUser(self,userName,  ):
-
-    def add_book(self, librarian, book):
-        if not librarian.is_librarian():
-            raise PermissionError("Only librarians can add books.")
-
-        books = self.file_manager.get_books()
-
-        # Check for duplicates by ID
-        if any(b["id"] == book.book_id for b in books):
-            raise ValueError(f"Book with ID {book.book_id} already exists.")
-
-        # add new book
-        books.append({
-            "id": book.book_id,
-            "title": book.title,
-            "author": book.author,
-            "copies": book.copies,
-            "genre": book.genre,
-            "year": book.year,
-        })
-        self.file_manager.sync_books(books, [], [])
-        print(f"Book '{book.title}' added successfully.")
-
-    def remove_book(self, librarian, book_id):
-        if not librarian.is_librarian():
-            raise PermissionError("Only librarians can remove books.")
-
-        books = self.file_manager.get_books()
-
-        # Check if the book exists
-        book_to_remove = next((b for b in books if b["id"] == book_id), None)
-        if not book_to_remove:
-            raise ValueError(f"Book with ID {book_id} does not exist.")
-        # Remove the book
-        books = [book for book in books if book["id"] != book_id]
-        self.file_manager.sync_books(books, [], [])
-        print(f"Book with ID {book_id} removed successfully.")
-
-    #Update existing book details.
-    def update_book(self, librarian, book_id, **kwargs):
-        if not librarian.is_librarian():
-            raise PermissionError("Only librarians can update books.")
-
-        books = self.file_manager.get_books()
-
-        # Finding the book to update
-        book_to_update = next((b for b in books if b["id"] == book_id), None)
-        if not book_to_update:
-            raise ValueError(f"Book with ID {book_id} does not exist.")
-
-        # Update the fields
-        for key, value in kwargs.items():
-            if key in book_to_update:
-                book_to_update[key] = value
-
-        self.file_manager.sync_books(books, [], [])
-        print(f"Book with ID {book_id} updated successfully.")
-
-
-     # Add a user to the waiting list.
-    def manage_waiting_list(self, book_id, user):
-        # Get available books
-        available_books = self.file_manager.get_available_books()
-
-        # Check if the book is available
-        book = next((b for b in available_books if b["id"] == book_id), None)
-        if book and int(book["copies"]) > 0:
-            print(f"Book with ID {book_id} is available. No need for a waiting list.")
-            return
-
-        # Get the current waiting list
-        waiting_list = self.file_manager.get_waiting_list()
-
-        # Check if the user is already in the waiting list
-        if any(entry["book_id"] == book_id and entry["username"] == user.username for entry in waiting_list):
-            print(f"User {user.username} is already in the waiting list for book ID {book_id}.")
-            return
-
-        # Add user to the waiting list
-        waiting_list.append({
-            "book_id": book_id,
-            "username": user.username,
-            "added_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
-        })
-
-        # Sync the updated waiting list
-        self.file_manager.sync_waiting_list(waiting_list)
-        print(f"User {user.username} added to the waiting list for book ID {book_id}.")
-
Index: models/Librarian.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/Librarian.py b/models/Librarian.py
new file mode 100644
--- /dev/null	(date 1736874724405)
+++ b/models/Librarian.py	(date 1736874724405)
@@ -0,0 +1,130 @@
+from datetime import datetime as dt
+
+class Librarian:
+    # Initialize the librarian department with a file manager, username, and role.
+    def __init__(self, file_manager, username, role):
+        self.file_manager = file_manager
+        self.username = username
+        self.role = role  # Role can be 'librarian' or 'user'
+
+    def is_librarian(self):
+        return self.role == 'librarian'
+
+    def addUser(self,userName,  ):
+
+    def add_book(self, librarian, book):
+        if not librarian.is_librarian():
+            raise PermissionError("Only librarians can add books.")
+
+        getbooks = self.file_manager.get_books()
+
+        # Check for duplicates by ID
+        if any(b["ID"] == book.book_ID for b in getbooks):
+            raise ValueError(f"Book with ID {book.book_ID} already exists.")
+
+        # add new book
+        getbooks.append({
+            "title": book.title,
+            "author": book.author,
+            "copies": book.copies,
+            "genre": book.genre,
+            "year": book.year,
+            "ID": book.book_ID,
+        })
+        self.file_manager.sync_books(getbooks, [], [])
+        print(f"Book with ID '{book.book_ID}' added successfully.")
+
+    def remove_book(self, librarian, book_ID):
+        if not librarian.is_librarian():
+            raise PermissionError("Only librarians can remove books.")
+
+        getbooks = self.file_manager.get_books()
+
+        # Check if the book exists
+        book_to_remove = next((b for b in getbooks if b["ID"] == book_ID), None)
+        if not book_to_remove:
+            raise ValueError(f"Book with ID {book_ID} does not exist.")
+
+        # Remove the book
+        books = [book for book in getbooks if book["ID"] != book_ID]
+        self.file_manager.sync_books(books, [], [])
+        print(f"Book with ID '{book_ID}' removed successfully.")
+
+    #Update existing book details.
+    def update_book(self, librarian, book_ID,  title=None, author=None, copies=None, genre=None, year=None):
+        if not librarian.is_librarian():
+            raise PermissionError("Only librarians can update books.")
+
+        getbooks = self.file_manager.get_books()
+
+        # Finding the book to update
+        book_to_update = next((b for b in getbooks if b["ID"] == book_ID), None)
+        if not book_to_update:
+            raise ValueError(f"Book with ID {book_ID} does not exist.")
+
+        # Update the fields
+        if title is not None:
+            book_to_update["title"] = title
+        if author is not None:
+            book_to_update["author"] = author
+        if copies is not None:
+            book_to_update["copies"] = copies
+        if genre is not None:
+            book_to_update["genre"] = genre
+        if year is not None:
+            book_to_update["year"] = year
+
+        self.file_manager.sync_books(getbooks, [], [])
+        print(f"Book with ID {book_ID} updated successfully.")
+
+
+    # Add a user to the waiting list.
+    def add_user_to_waiting_list(self, librarian, book_ID, user):
+        if not librarian.is_librarian():
+            raise PermissionError("Only librarians can update books.")
+
+        # Get available books
+        available_books = self.file_manager.get_available_books()
+
+        # Check if the book is available
+        avabook = next((b for b in available_books if b["ID"] == book_ID), None)
+        if avabook and int(avabook["copies"]) > 0:
+            print(f"Book with ID {book_ID} is available. No need for a waiting list.")
+            return
+
+        # Get the current waiting list
+        waiting_list = self.file_manager.get_waiting_list()
+
+        # Check if the user is already in the waiting list
+        if any(entry["book_ID"] == book_ID and entry["username"] == user.username for entry in waiting_list):
+            print(f"User {user.username} is already in the waiting list for book ID {book_ID}.")
+            return
+
+        # Add user to the waiting list
+        waiting_list.append({
+            "book_ID": book_ID,
+            "username": user.username,
+            "added_date": dt.now().strftime("%Y-%m-%d"),
+        })
+
+        # Sync the updated waiting list
+        self.file_manager.sync_waiting_list(waiting_list)
+        print(f"User {user.username} added to the waiting list for book ID {book_ID}.")
+
+        # View all books
+    def view_books(self, librarian):
+        if not librarian.is_librarian():
+            raise PermissionError("Only librarians can view books.")
+
+        # Get all books
+        getbooks = self.file_manager.get_books()
+        # Display the list of books
+        if getbooks:
+            print("Books in the system:")
+            for book in getbooks:
+                print(
+                    f"Title: {book['title']}, Author: {book['author']}, Genre: {book['genre']}, Year: {book['year']}, Copies: {book['copies']}, ID: {book['ID']}")
+        else:
+            print("No books found in the system.")
+
+
Index: tests/test_file_manager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/test_file_manager.py b/tests/test_file_manager.py
new file mode 100644
--- /dev/null	(date 1736875186507)
+++ b/tests/test_file_manager.py	(date 1736875186507)
@@ -0,0 +1,10 @@
+import unittest
+
+
+class MyTestCase(unittest.TestCase):
+    def test_something(self):
+        self.assertEqual(True, False)  # add assertion here
+
+
+if __name__ == '__main__':
+    unittest.main()
Index: tests/test_logger.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/test_logger.py b/tests/test_logger.py
new file mode 100644
--- /dev/null	(date 1736875233631)
+++ b/tests/test_logger.py	(date 1736875233631)
@@ -0,0 +1,10 @@
+import unittest
+
+
+class MyTestCase(unittest.TestCase):
+    def test_something(self):
+        self.assertEqual(True, False)  # add assertion here
+
+
+if __name__ == '__main__':
+    unittest.main()
Index: tests/test_library.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/test_library.py b/tests/test_library.py
new file mode 100644
--- /dev/null	(date 1736875276596)
+++ b/tests/test_library.py	(date 1736875276596)
@@ -0,0 +1,10 @@
+import unittest
+
+
+class MyTestCase(unittest.TestCase):
+    def test_something(self):
+        self.assertEqual(True, False)  # add assertion here
+
+
+if __name__ == '__main__':
+    unittest.main()
Index: Book_Management/file_manager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport csv\r\n\r\nclass FileManager:\r\n    def __init__(self, data_directory=\"Book_Management\"):\r\n        #Initialize file management department.\r\n        # data_directory is Path to the data file folder.\r\n        self.data_directory = data_directory\r\n        self.books_file = os.path.join(data_directory, \"books.csv\")\r\n        self.available_books_file = os.path.join(data_directory, \"available_books.csv\")\r\n        self.loaned_books_file = os.path.join(data_directory, \"loaned_books.csv\")\r\n        self.users_file = os.path.join(data_directory, \"users.csv\")\r\n\r\n    # Read data from a CSV file.\r\n    # Returns a list of dictionaries.\r\n    def read_csv(self, file):\r\n        try:\r\n            with open(file, mode=\"r\", encoding=\"utf-8\") as f:\r\n                reader = csv.DictReader(f)\r\n                return [row for row in reader]\r\n        except Exception as e:\r\n            print(f\"Error reading {file}: {e}\")\r\n            return []\r\n\r\n    # Writing data to a CSV file.\r\n    def write_csv(self, file, data, fieldnames):\r\n        try:\r\n            with open(file, mode=\"w\", encoding=\"utf-8\", newline=\"\") as f:\r\n                writer = csv.DictWriter(f, fieldnames=fieldnames)\r\n                writer.writeheader()\r\n                writer.writerows(data)\r\n        except Exception as e:\r\n            print(f\"Error writing to {file}: {e}\")\r\n\r\n    # Return all books from books.csv.\r\n    def get_books(self):\r\n        return self.read_csv(self.books_file)\r\n\r\n    # Returning available books from available_books.csv.\r\n    def get_available_books(self):\r\n        return self.read_csv(self.available_books_file)\r\n\r\n    # Returning borrowed books from loaned_books.csv.\r\n    def get_loaned_books(self):\r\n        return self.read_csv(self.loaned_books_file)\r\n\r\n    #Return a list of users from users.csv.\r\n    def get_users(self):\r\n        return self.read_csv(self.users_file)\r\n\r\n    # Synchronize book lists (general, available, borrowed).\r\n    def sync_books(self, books, available_books, loaned_books):\r\n        self.write_csv(self.books_file, books, [\"id\", \"title\", \"author\", \"copies\", \"genre\", \"year\"])\r\n        self.write_csv(self.available_books_file, available_books,\r\n                       [\"id\", \"title\", \"author\", \"copies\", \"genre\", \"year\"])\r\n        self.write_csv(self.loaned_books_file, loaned_books,\r\n                       [\"id\", \"title\", \"author\", \"genre\", \"year\", \"borrowed_by\", \"borrowed_date\"])\r\n\r\n    #Synchronizing user list.\r\n    def sync_users(self, users):\r\n        self.write_csv(self.users_file, users, [\"username\", \"password_hash\", \"role\"])\r\n\r\n        # Returning the waiting list from waiting_list.csv.\r\n\r\n    def get_waiting_list(self):\r\n        return self.read_csv(os.path.join(self.data_directory, \"waiting_list.csv\"))\r\n\r\n        # Sync the waiting list to the waiting_list.csv file.\r\n\r\n    def sync_waiting_list(self, waiting_list):\r\n        self.write_csv(\r\n            os.path.join(self.data_directory, \"waiting_list.csv\"),\r\n            waiting_list,\r\n            [\"book_id\", \"username\", \"added_date\"]\r\n        )
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Book_Management/file_manager.py b/Book_Management/file_manager.py
--- a/Book_Management/file_manager.py	(revision 4817f8d672c56cad2b772eb738e567cd91f393d1)
+++ b/Book_Management/file_manager.py	(date 1736872850042)
@@ -1,23 +1,23 @@
 import os
 import csv
+import pandas as pd
+
 
 class FileManager:
-    def __init__(self, data_directory="Book_Management"):
+    def __init__(self):
         #Initialize file management department.
-        # data_directory is Path to the data file folder.
-        self.data_directory = data_directory
-        self.books_file = os.path.join(data_directory, "books.csv")
-        self.available_books_file = os.path.join(data_directory, "available_books.csv")
-        self.loaned_books_file = os.path.join(data_directory, "loaned_books.csv")
-        self.users_file = os.path.join(data_directory, "users.csv")
+        self.books_file = os.path.join("../Book_Management/books.csv")
+        self.available_books_file = os.path.join("../data/available_books.csv")
+        self.loaned_books_file = os.path.join("../data/loaned_books.csv")
+        self.users_file = os.path.join("../data/users.csv")
+        self.waiting_list_file = os.path.join("../data/waiting_list.csv")
 
     # Read data from a CSV file.
     # Returns a list of dictionaries.
     def read_csv(self, file):
         try:
-            with open(file, mode="r", encoding="utf-8") as f:
-                reader = csv.DictReader(f)
-                return [row for row in reader]
+            with open(file, mode="r") as f:
+                return list(csv.DictReader(f))
         except Exception as e:
             print(f"Error reading {file}: {e}")
             return []
@@ -25,10 +25,11 @@
     # Writing data to a CSV file.
     def write_csv(self, file, data, fieldnames):
         try:
-            with open(file, mode="w", encoding="utf-8", newline="") as f:
-                writer = csv.DictWriter(f, fieldnames=fieldnames)
-                writer.writeheader()
-                writer.writerows(data)
+            with open(file, mode='a', newline="") as f:
+                writer = csv.DictWriter(f, fieldnames=fieldnames)  # create a list of column names
+                if f.tell() == 0:  #Check if the file is empty.
+                    writer.writeheader()  # Writing the fieldnames to the CSV file only if the file is empty
+                writer.writerows(data)  # Writing each dictionary as a row in the CSV file
         except Exception as e:
             print(f"Error writing to {file}: {e}")
 
@@ -44,32 +45,26 @@
     def get_loaned_books(self):
         return self.read_csv(self.loaned_books_file)
 
+    # Returning the waiting list from waiting_list.csv.
+    def get_waiting_list(self):
+        return self.read_csv(self.waiting_list_file)
+
     #Return a list of users from users.csv.
     def get_users(self):
         return self.read_csv(self.users_file)
 
     # Synchronize book lists (general, available, borrowed).
     def sync_books(self, books, available_books, loaned_books):
-        self.write_csv(self.books_file, books, ["id", "title", "author", "copies", "genre", "year"])
+        self.write_csv(self.books_file, books, ["ID", "title", "author", "copies", "genre", "year"])
         self.write_csv(self.available_books_file, available_books,
-                       ["id", "title", "author", "copies", "genre", "year"])
+                       ["ID", "title", "author", "copies", "genre", "year"])
         self.write_csv(self.loaned_books_file, loaned_books,
-                       ["id", "title", "author", "genre", "year", "borrowed_by", "borrowed_date"])
+                       ["ID", "title", "author", "genre", "year", "borrowed_by", "borrowed_date"])
 
     #Synchronizing user list.
     def sync_users(self, users):
         self.write_csv(self.users_file, users, ["username", "password_hash", "role"])
 
-        # Returning the waiting list from waiting_list.csv.
-
-    def get_waiting_list(self):
-        return self.read_csv(os.path.join(self.data_directory, "waiting_list.csv"))
-
-        # Sync the waiting list to the waiting_list.csv file.
-
+    # Sync the waiting list to the waiting_list.csv file.
     def sync_waiting_list(self, waiting_list):
-        self.write_csv(
-            os.path.join(self.data_directory, "waiting_list.csv"),
-            waiting_list,
-            ["book_id", "username", "added_date"]
-        )
\ No newline at end of file
+        self.write_csv(self.waiting_list_file, waiting_list, ["book_ID", "username", "added_date"])
Index: models/Book.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Class of Book\r\n\r\nimport pandas as pd\r\nimport os\r\n\r\n\r\nclass Book():\r\n    ID_counter = 1034\r\n\r\n    #constructor\r\n    def __init__(self, title, author, is_loaned, copies, genre, year):\r\n        self.title = title\r\n        self.author = author\r\n        self.is_loaned = is_loaned\r\n        self.copies = copies\r\n        self.genre = genre\r\n        self.year = year\r\n        self.book_ID = Book.get_next_ID()\r\n\r\n\r\n\r\n    # Get the next ID and increment the counter\r\n    @classmethod  # This decorator makes the method a class method\r\n    def get_next_ID(cls):\r\n        next_ID = cls.ID_counter\r\n        cls.ID_counter += 1\r\n        return next_ID\r\n\r\n    def add_copy(self):\r\n        self.copies += 1\r\n\r\n    def remove_copy(self):\r\n        if self.copies > 0:\r\n            self.copies -= 1\r\n        else:\r\n            raise ValueError(\"No copies available to remove.\")\r\n\r\n\r\n\r\n    def update_Books(books_file, loaned_books_file, available_books_file):\r\n        books = pd.read_csv(books_file)\r\n        if os.path.exists(loaned_books_file):\r\n            loaned_books = pd.read_csv(loaned_books_file)\r\n        if os.path.exists(available_books_file):\r\n            available_books = pd.read_csv(available_books_file)\r\n\r\n        updated_rows = books[~books.aply(tuple, axis=1)]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/Book.py b/models/Book.py
--- a/models/Book.py	(revision 4817f8d672c56cad2b772eb738e567cd91f393d1)
+++ b/models/Book.py	(date 1736874455928)
@@ -37,11 +37,3 @@
 
 
 
-    def update_Books(books_file, loaned_books_file, available_books_file):
-        books = pd.read_csv(books_file)
-        if os.path.exists(loaned_books_file):
-            loaned_books = pd.read_csv(loaned_books_file)
-        if os.path.exists(available_books_file):
-            available_books = pd.read_csv(available_books_file)
-
-        updated_rows = books[~books.aply(tuple, axis=1)]
